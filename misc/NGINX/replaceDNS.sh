#!/bin/bash

# ==============================================================================
#           Switch systemd-resolved and dnsmasq (with Restore)
#
# This script automates switching the system's DNS resolver from systemd-resolved
# to dnsmasq. It includes a restore function to revert the changes.
#
# MODES:
#  - Default:   Prompts to take over DNS. Creates a restore script before acting.
#  - Restore:   Run with the 'restore' argument to revert the changes.
#               (e.g., ./replaceDNS.sh restore)
# ==============================================================================

# --- Configuration ---
# You can change these upstream DNS servers if you prefer others.
# Examples:
#   Cloudflare: 1.1.1.1, 1.0.0.1
#   Google:     8.8.8.8, 8.8.4.4
#   OpenDNS:    208.67.222.222, 208.67.220.220
UPSTREAM_DNS_1="1.1.1.1"
UPSTREAM_DNS_2="1.0.0.1"
RESTORE_SCRIPT_PATH="/etc/dns_restore_script.sh"

# --- Color Codes for Output ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# --- Function to Print Messages ---
log_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# --- Restore Functionality ---
run_restore() {
    log_message "Attempting to restore previous DNS configuration..."
    if [ ! -f "$RESTORE_SCRIPT_PATH" ]; then
        log_error "Restore script not found at $RESTORE_SCRIPT_PATH!"
        log_error "Cannot automatically restore. Please check your system manually."
        exit 1
    fi

    log_message "Executing restore script..."
    bash "$RESTORE_SCRIPT_PATH"
    if [ $? -eq 0 ]; then
        log_message "✅ Restore script executed successfully."
    else
        log_error "Restore script failed to execute properly. Please check your system manually."
    fi
    exit 0
}

# --- Takeover Functionality ---
create_restore_script() {
    log_message "Generating restore script at $RESTORE_SCRIPT_PATH..."

    # Determine the original state of resolv.conf
    RESOLV_CONF_TARGET=$(readlink -f /etc/resolv.conf || echo "/etc/resolv.conf")

    # Create the restore script using a HEREDOC
    cat > "$RESTORE_SCRIPT_PATH" << EOF
#!/bin/bash
# This script was auto-generated by replaceDNS.sh to restore your DNS settings.

echo "--- Restoring systemd-resolved --- "

# Stop and disable dnsmasq
echo "Disabling dnsmasq..."
systemctl stop dnsmasq &>/dev/null || true
systemctl disable dnsmasq &>/dev/null || true

# Restore original dnsmasq.conf if a backup exists
if [ -f /etc/dnsmasq.conf.bak ]; then
    echo "Restoring original dnsmasq.conf..."
    mv -f /etc/dnsmasq.conf.bak /etc/dnsmasq.conf
fi

# Restore original resolv.conf
echo "Restoring /etc/resolv.conf..."
rm -f /etc/resolv.conf
ln -sf "$RESOLV_CONF_TARGET" /etc/resolv.conf

# Re-enable and start systemd-resolved if it was active
if systemctl list-unit-files | grep -q 'systemd-resolved.service'; then
    echo "Enabling and restarting systemd-resolved..."
    systemctl enable systemd-resolved.service
    systemctl start systemd-resolved.service
fi

echo "✅ DNS configuration restored."

# Self-destruct
rm -f "$RESTORE_SCRIPT_PATH"
EOF

    chmod +x "$RESTORE_SCRIPT_PATH"
    log_message "Restore script created successfully."
}

run_takeover() {
    set -e # Exit on any error during the takeover process

    # --- Step 1: Detect Distro and Install Packages ---
    log_message "Detecting distribution and installing packages..."
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS_ID=$ID
    else
        log_error "Cannot determine OS from /etc/os-release. Aborting."
        exit 1
    fi

    if [[ "$OS_ID" == "ubuntu" || "$OS_ID" == "debian" || "$OS_ID" == "linuxmint" ]]; then
        PKG_MANAGER="apt-get"
        $PKG_MANAGER update > /dev/null
    elif [[ "$OS_ID" == "fedora" || "$OS_ID" == "almalinux" || "$OS_ID" == "rocky" || "$OS_ID" == "centos" || "$OS_ID" == "rhel" ]]; then
        command -v dnf &> /dev/null && PKG_MANAGER="dnf" || PKG_MANAGER="yum"
    else
        log_error "Unsupported distribution: '$OS_ID'. Aborting."
        exit 1
    fi
    $PKG_MANAGER install -y dnsmasq dnsutils

    # --- Step 2: Create Restore Script (CRITICAL STEP) ---
    create_restore_script

    # --- Step 3: Disable systemd-resolved ---
    log_message "Disabling and stopping systemd-resolved..."
    if systemctl is-active --quiet systemd-resolved; then
        systemctl disable systemd-resolved.service
        systemctl stop systemd-resolved.service
    fi

    # --- Step 4: Configure /etc/resolv.conf ---
    rm -f /etc/resolv.conf
    echo "nameserver 127.0.0.1" > /etc/resolv.conf

    # --- Step 5: Configure dnsmasq ---
    DNSMASQ_CONF="/etc/dnsmasq.conf"
    if [ -f "$DNSMASQ_CONF" ]; then
        mv "$DNSMASQ_CONF" "$DNSMASQ_CONF.bak"
    fi
    cat > "$DNSMASQ_CONF" << EOF
listen-address=127.0.0.1
no-resolv
server=${UPSTREAM_DNS_1}
server=${UPSTREAM_DNS_2}
EOF

    # --- Step 6: Start and Enable dnsmasq ---
    log_message "Starting and enabling dnsmasq service..."
    systemctl enable dnsmasq.service
    systemctl restart dnsmasq.service

    # --- Final Verification ---
    log_message "Verifying DNS resolution..."
    if nslookup example.com 127.0.0.1 > /dev/null; then
        log_message "✅ Success! DNS resolution is working through dnsmasq."
        log_message "An undo script has been created at: $RESTORE_SCRIPT_PATH"
    else
        log_error "❌ Failure! DNS resolution test failed."
        log_error "You can try to undo the changes by running: sudo $0 restore"
    fi
}

# --- Main Execution Logic ---

# 1. Root User Check
if [ "$(id -u)" -ne 0 ]; then
  log_error "This script must be run as root. Please use sudo."
  exit 1
fi

# 2. Check for restore argument
if [ "$1" == "restore" ]; then
    run_restore
fi

# 3. Show warning and prompt user
clear
echo -e "${RED}============================= WARNING =============================${NC}"
echo -e "This script will perform a ${YELLOW}major change${NC} to your system's DNS configuration."
echo -e "It will disable the native ${YELLOW}systemd-resolved${NC} service and replace it"
echo -e "with ${YELLOW}dnsmasq${NC} as the primary DNS resolver for this machine."
echo ""
echo -e "This can have unintended consequences and is ${RED}difficult to undo manually${NC}."
echo ""
echo -e "A restore script will be generated at ${GREEN}$RESTORE_SCRIPT_PATH${NC} before changes are made."
echo -e "You can run ${YELLOW}'$0 restore'${NC} to revert the changes."
echo -e "${RED}===================================================================${NC}"
echo ""

read -p "Type 'yes' to proceed, or 'restore' to undo previous changes: " confirmation

case "$confirmation" in
    yes)
        log_message "Proceeding with dnsmasq takeover..."
        run_takeover
        ;;
    restore)
        run_restore
        ;;
    *)
        log_warning "Invalid input. Aborting script."
        exit 0
        ;;
esac

exit 0