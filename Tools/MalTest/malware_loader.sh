#!/bin/bash
#
# An expanded version of the Wazuh malware downloader test script (meant for Yara).
#
# This downloads a variety of real malware to test Linux AV defenses. It should work on Debian and RHEL systems
#
#
# Samuel Brucker 2025-2026
#


function fetch_sample(){
  curl -s -XGET "$1" -o "$2"
}

# Function to check for and install dependencies
function install_deps() {
    read -p "  Do you want to install dependencies (unzip, 7z)? (y/n) " -n 1 -r DEP_ANSWER
    echo
    if [[ $DEP_ANSWER =~ ^[Yy]$ ]]; then
        # Check for Debian/Ubuntu (apt-get)
        if command -v apt-get &> /dev/null; then
            echo "Found apt-get. Installing 'unzip' and 'p7zip-full'..."
            sudo apt-get update
            sudo apt-get install -y unzip p7zip-full
        # Check for Fedora (dnf)
        elif command -v dnf &> /dev/null; then
            echo "Found dnf. Installing 'unzip' and 'p7zip-plugins'..."
            sudo dnf install -y unzip p7zip p7zip-plugins
        # Check for RHEL/CentOS (yum)
        elif command -v yum &> /dev/null; then
            echo "Found yum. Installing 'unzip' and 'p7zip-plugins'..."
            sudo yum install -y unzip p7zip p7zip-plugins
        else
            echo "Could not find apt-get, dnf, or yum. Please install 'unzip' and 'p7zip' manually."
        fi
        echo "Dependency check complete."
    else
        echo "Skipping dependency installation. Extraction might fail if 'unzip' or '7z' are not installed."
    fi
}

echo "WARNING: Downloading Malware samples, please use this script with caution."
read -p "  Do you want to continue? (y/n) " -n 1 -r ANSWER
echo
mkdir -p /tmp/test
mkdir -p /tmp/test/sample_malware

if [[ $ANSWER =~ ^[Yy]$ ]]
then
    echo

    # Install dependencies first if user agrees
    install_deps
    echo

    # Mirai
    echo "# Mirai: https://en.wikipedia.org/wiki/Mirai_(malware)"
    echo "Downloading malware sample..."
    fetch_sample "https://wazuh-demo.s3-us-west-1.amazonaws.com/mirai" "/tmp/test/mirai" && echo "Done!" || echo "Error while downloading."
    echo

    # Xbash
    echo "# Xbash: https://unit42.paloaltonetworks.com/unit42-xbash-combines-botnet-ransomware-coinmining-worm-targets-linux-windows/"
    echo "Downloading malware sample..."
    fetch_sample "https://wazuh-demo.s3-us-west-1.amazonaws.com/xbash" "/tmp/test/xbash" && echo "Done!" || echo "Error while downloading."
    echo

    # VPNFilter
    echo "# VPNFilter: https://news.sophos.com/en-us/2018/05/24/vpnfilter-botnet-a-sophoslabs-analysis/"
    echo "Downloading malware sample..."
    fetch_sample "https://wazuh-demo.s3-us-west-1.amazonaws.com/vpn_filter" "/tmp/test/vpn_filter" && echo "Done!" || echo "Error while downloading."
    echo

    # Webshell
    echo "# WebShell: https://github.com/SecWiki/WebShell-2/blob/master/Php/Worse%20Linux%20Shell.php"
    echo "Downloading malware sample..."
    fetch_sample "https://wazuh-demo.s3-us-west-1.amazonaws.com/webshell" "/tmp/test/webshell" && echo "Done!" || echo "Error while downloading."
    echo

    # EICAR
    echo "# EICAR: https://secure.eicar.org/eicar.com"
    # Using curl to be consistent with fetch_sample, changed target filename
    curl -s -XGET "https://secure.eicar.org/eicar.com" -o "/tmp/test/eicar.com" && echo "Done!" || echo "Error while downloading."
    echo

    # Sample malware
    echo "# Loading sample malware from local 'sampleMalware' directory..."
    # Check if the local sampleMalware directory exists before trying to unzip from it
    if [ -d "sampleMalware" ]; then
        echo "Found local 'sampleMalware' directory. Extracting to /tmp/test/sample_malware/ ..."
        
        # Extract zip files to the target directory
        if ls sampleMalware/*.zip &> /dev/null; then
            unzip -o sampleMalware/*.zip -d /tmp/test/sample_malware
            echo "Extracted .zip files."
        else
            echo "No .zip files found in sampleMalware/."
        fi
        
        # Extract 7z files to the target directory
        if ls sampleMalware/*.7z &> /dev/null; then
            # 7z 'e' extracts all files to a single dir.
            # '-o' specifies output dir (no space). '-y' auto-says yes to prompts.
            7z e -y sampleMalware/*.7z -o/tmp/test/sample_malware
            echo "Extracted .7z files."
        else
            echo "No .7z files found in sampleMalware/."
        fi
        echo "Extraction complete."
    else
        echo "Directory 'sampleMalware' not found in current path. Skipping local extraction."
    fi

fi
