#!/bin/bash
#
# This script automates the installation and complete configuration of a
# SaltStack deployment server (master, api, minion) and a Node.js GUI.
#
# *** MODIFIED: deployuser creation and configuration is DISABLED ***
# *** GUI will use default credentials from config.json ***
#
# The Node.js GUI server runs directly on port 3000 and serves all content.
# Frontend script.js is configured with a HARDCODED IP address.
#
# --- Ports Used ---
# TCP 3000: Salt-GUI Node.js Backend & Frontend (Public Access Point)
# TCP 4505: Salt Master (Publisher)
# TCP 4506: Salt Master (Returner)
# TCP 8001: Salt API (Listens on 0.0.0.0, accessed via Node.js proxy)
#

# --- Configuration ---
SALT_API_PORT=8001
NODEJS_PORT=3000 # Port the Node.js server will listen on
TARGET_IP="172.20.241.20" # HARDCODED IP for frontend AND backend config
MASTER_CONFIG_FILE="/etc/salt/master"
MINION_CONFIG_FILE="/etc/salt/minion"

GUI_REPO_URL="https://github.com/kyschwartz/salt-gui.git"
GUI_INSTALL_DIR="/opt/salt-gui" # Use this directly for paths
GUI_CONFIG_JSON="$GUI_INSTALL_DIR/config.json" # Path to config file
GUI_SCRIPT_JS="$GUI_INSTALL_DIR/script.js"    # Path to Frontend JS script
GUI_SERVICE_FILE="/etc/systemd/system/salt-gui.service"
GUI_USER="saltgui"

# --- SECURE CREDENTIALS (deployuser - DISABLED) ---
# API_USER="deployuser"
# API_PASS="ChangeMeIntoAMuchHarderToCrackPasswordPleaseBecauseThisIsSuperShort123!*"


# Exit immediately if a command exits with a non-zero status.
set -e

# --- Helper Functions ---
log() {
    echo "[INFO] $1"
}

warn() {
    echo "[WARN] $1"
}

error() {
    echo "[ERROR] $1" >&2
    exit 1
}

# --- Script Functions ---

check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        error "This script must be run as root or with sudo."
    fi
    log "Root privileges confirmed."
}

stop_gui_service() {
    log "Attempting to stop existing salt-gui service..."
    if systemctl is-active --quiet salt-gui; then
        systemctl stop salt-gui || warn "Failed to stop salt-gui service. Manual check/kill may be needed if EADDRINUSE occurs."
        sleep 1 # Give service a moment to stop
    else
        log "salt-gui service is not active."
    fi
}


install_dependencies() {
    log "Installing base dependencies (curl, git, jq, policycoreutils-python-utils)..."

    if command -v apt &> /dev/null; then
        log "Detected Debian-based system (apt found)."
        apt-get update -y > /dev/null
        apt-get install -y curl git jq
        if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - > /dev/null
            apt-get install -y nodejs
        fi
        PKG_MANAGER="apt"
    elif command -v dnf &> /dev/null; then
        log "Detected Red Hat-based system (dnf found)."
        dnf install -y curl git jq policycoreutils-python-utils
        if ! command -v node &> /dev/null; then
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash - > /dev/null
            dnf install -y nodejs
        fi
        PKG_MANAGER="dnf"
    elif command -v yum &> /dev/null; then
        log "Detected Red Hat-based system (yum found)."
        yum install -y curl git jq policycoreutils-python-utils
        if ! command -v node &> /dev/null; then
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash - > /dev/null
            yum install -y nodejs
        fi
        PKG_MANAGER="yum"
    else
        error "Unsupported distribution."
    fi
    log "Dependencies installed."
}

run_bootstrap() {
    log "Downloading and executing the Salt bootstrap script..."
    curl -L https://github.com/saltstack/salt-bootstrap/releases/latest/download/bootstrap-salt.sh | sh -s -- -M -A
}

ensure_api_installed() {
    log "Ensuring salt-api package is installed..."
    case "$PKG_MANAGER" in
        apt) apt-get install -y salt-api > /dev/null ;;
        dnf) dnf install -y salt-api > /dev/null ;;
        yum) yum install -y salt-api > /dev/null ;;
    esac
    log "salt-api package installation confirmed."
}

configure_api() {
    log "Configuring Salt API in $MASTER_CONFIG_FILE..."
    # Ensure previous script additions are removed to avoid duplication
    sed -i '/# --- Salt API Configuration (Auto-Generated by Script) ---/,+15d' $MASTER_CONFIG_FILE || true # Remove block if exists

    # Add the configuration block cleanly
    # *** MODIFIED: Commented out deployuser PAM section ***
    cat << EOF >> $MASTER_CONFIG_FILE

# --- Salt API Configuration (Auto-Generated by Script) ---
rest_cherrypy:
  port: $SALT_API_PORT
  host: 0.0.0.0
  disable_ssl: True
external_auth:
  pam: {}
#    deployuser: # DISABLED BY SCRIPT
#      - .*
#      - '@runner'
#      - '@wheel'
#      - '@jobs'
netapi_enable_clients:
  - local
  - runner
  - wheel
EOF
    warn "Salt API configured with SSL disabled (disable_ssl: True)."
    warn "*** deployuser PAM configuration DISABLED in /etc/salt/master ***"
}

configure_master_user() {
    log "Setting Salt Master run user to 'root' for PAM compatibility..."
    sed -i '/^#*user: /d' $MASTER_CONFIG_FILE
    echo "user: root" >> $MASTER_CONFIG_FILE
    log "Salt Master run user set to 'root'."
}

# *** FUNCTION DISABLED ***
# create_api_user() {
#     log "Creating/Updating system user '$API_USER' for API authentication..."
#     if id "$API_USER" &>/dev/null; then
#         log "User '$API_USER' exists. Setting password."
#     else
#         log "Creating new system user '$API_USER'..."
#         useradd -r -M $API_USER
#     fi
#     echo "$API_USER:$API_PASS" | chpasswd
#     log "Password set for API user '$API_USER'."
# }

manage_salt_services() {
    log "Enabling Salt services (master, api, minion)..."
    systemctl enable salt-master salt-api salt-minion > /dev/null
    log "Restarting Salt services (master first for PAM)..."
    systemctl restart salt-master
    sleep 3
    systemctl restart salt-api
    systemctl restart salt-minion
}

install_and_configure_gui() {
    log "Setting up Salt-GUI in $GUI_INSTALL_DIR..."
    if [ -d "$GUI_INSTALL_DIR" ]; then
        log "GUI directory exists. Removing old version..."
        rm -rf "$GUI_INSTALL_DIR"
    fi
    log "Cloning Salt-GUI from $GUI_REPO_URL..."
    git clone $GUI_REPO_URL --branch=master "$GUI_INSTALL_DIR"

    log "Installing Node.js dependencies..."
    cd "$GUI_INSTALL_DIR"
    npm install --loglevel=error

    log "Configuring GUI backend via $GUI_CONFIG_JSON..."
    if [ ! -f "$GUI_CONFIG_JSON" ]; then
        error "$GUI_CONFIG_JSON not found. Cannot configure."
    fi

    # *** MODIFIED: Only update saltApiUrl, keep default user/pass ***
    log "Updating saltApiUrl in $GUI_CONFIG_JSON, keeping existing credentials..."
    local temp_json=$(mktemp)
    jq \
    --arg url "http://${TARGET_IP}:$SALT_API_PORT" \
    '.saltApiUrl = $url' \
    "$GUI_CONFIG_JSON" > "$temp_json" \
    || error "jq command failed to update saltApiUrl in $GUI_CONFIG_JSON"
    mv "$temp_json" "$GUI_CONFIG_JSON" \
    || error "Failed to replace $GUI_CONFIG_JSON with updated version."

    # Verify JSON structure and API URL value
    log "Verifying $GUI_CONFIG_JSON..."
    if ! jq -e ".saltApiUrl == \"http://${TARGET_IP}:$SALT_API_PORT\"" "$GUI_CONFIG_JSON" > /dev/null; then
        error "Verification of saltApiUrl in $GUI_CONFIG_JSON failed."
    fi
     if ! jq -e ".saltUsername" "$GUI_CONFIG_JSON" > /dev/null; then
        warn "Could not verify saltUsername exists in $GUI_CONFIG_JSON (expected default)."
    fi
    log "$GUI_CONFIG_JSON URL updated successfully."


    log "Configuring GUI frontend ($GUI_SCRIPT_JS)..."
    # HARDCODE the IP address for frontend connection
    local proxy_url_for_script="http://${TARGET_IP}:${NODEJS_PORT}"
    log "Setting frontend proxy URL to HARDCODED: $proxy_url_for_script"

    sed -i "s|^ *const proxyUrl = 'http://localhost:3000';|const proxyUrl = '${proxy_url_for_script}';|" "$GUI_SCRIPT_JS" \
    || error "Failed to update proxyUrl in $GUI_SCRIPT_JS"

     # Verify update
    if ! grep -q "const proxyUrl = '${proxy_url_for_script}';" "$GUI_SCRIPT_JS"; then
        warn "Failed to confirm proxyUrl update in $GUI_SCRIPT_JS. Manual edit might be needed."
    fi

    log "GUI config.json (URL only) and script.js configured."
    cd - > /dev/null
}

setup_gui_service() {
    log "Setting up salt-gui systemd service..."
    log "Creating '$GUI_USER' user..."
    useradd -r -M -s /bin/false -d "$GUI_INSTALL_DIR" "$GUI_USER" || log "User $GUI_USER likely exists."
    chown -R "$GUI_USER":"$GUI_USER" "$GUI_INSTALL_DIR"

    NODE_PATH=$(which node)
    [ -z "$NODE_PATH" ] && error "Could not find 'node' executable."
    log "Node.js executable: $NODE_PATH"

    log "Creating systemd service file: $GUI_SERVICE_FILE..."
    cat << EOF > "$GUI_SERVICE_FILE"
[Unit]
Description=Salt-GUI Node.js Server
Documentation=$GUI_REPO_URL
After=network.target salt-api.service

[Service]
Type=simple
User=$GUI_USER
Group=$GUI_USER
WorkingDirectory=$GUI_INSTALL_DIR 
ExecStart=$NODE_PATH server.js 
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

    log "Reloading systemd, enabling and restarting salt-gui service..."
    systemctl daemon-reload
    systemctl enable salt-gui.service > /dev/null
    systemctl restart salt-gui.service
    sleep 2
    systemctl status salt-gui --no-pager || warn "salt-gui service might have issues starting. Check 'journalctl -u salt-gui'."
    log "Node.js service 'salt-gui' configured."
}

configure_selinux() {
    if [ "$PKG_MANAGER" = "dnf" ] || [ "$PKG_MANAGER" = "yum" ]; then
        log "Configuring SELinux..."
        if sestatus | grep "Current mode:" | grep -q "enforcing"; then
            log "SELinux is enforcing."
            log "Allowing Node.js service port $NODEJS_PORT (http_port_t)..."
            if ! semanage port -l | grep http_port_t | grep -qw "$NODEJS_PORT"; then
                semanage port -a -t http_port_t -p tcp "$NODEJS_PORT" || warn "Failed to add port $NODEJS_PORT context."
            else
                log "Port $NODEJS_PORT already has http_port_t context."
            fi

            log "Allowing Node.js service network connection (daemons_enable_cluster_mode)..."
            setsebool -P daemons_enable_cluster_mode 1 || warn "Could not set daemons_enable_cluster_mode."
        else
            warn "SELinux not enforcing. Skipping SELinux commands."
        fi
    else
        log "Skipping SELinux configuration (not RH-based)."
    fi
}


configure_local_minion() {
    log "Configuring local salt-minion..."
    [ ! -f "$MINION_CONFIG_FILE" ] && warn "$MINION_CONFIG_FILE not found. Skipping." && return
    log "Setting minion master to HARDCODED: $TARGET_IP"
    sed -i "s/^#*master:.*/master: $TARGET_IP/" "$MINION_CONFIG_FILE"
    log "Restarting salt-minion..."
    systemctl restart salt-minion
    log "Waiting 5 seconds..." && sleep 5
    log "Accepting all pending Salt keys..."
    salt-key -A -y || warn "salt-key command failed."
}

# --- Main Execution ---

log "Starting SaltStack + Salt-GUI Direct Deployment..."
log "*** deployuser configuration is DISABLED for this run ***"
log "Using HARDCODED IP for Frontend & Backend: $TARGET_IP"

check_root
stop_gui_service
install_dependencies
run_bootstrap
ensure_api_installed
configure_api             # Configures API but comments out deployuser PAM
configure_master_user
# create_api_user         # *** SKIPPED ***
manage_salt_services      # Restart Salt services

install_and_configure_gui # Clones repo, installs deps, configures config.json (URL ONLY) & script.js
setup_gui_service         # Creates/enables systemd service, restarts Node.js app

configure_selinux         # SELinux rules for Node.js port and network
configure_local_minion    # Configure local minion last

log "---"
log "SaltStack Deployment Server with Salt-GUI (Node.js Direct) Setup Complete!"
log "*** deployuser setup was SKIPPED. GUI will use default credentials from config.json ***"
log "Salt-GUI backend configured via config.json, accessible on port $NODEJS_PORT."
log "Frontend & API URL configured to use IP: $TARGET_IP."
log "*** FIREWALL WAS NOT CONFIGURED BY THIS SCRIPT ***"
log ""
log "--- ✅ SUCCESS: FINAL NEXT STEPS ✅ ---"
log "1. FIREWALL: Manually configure local & cloud firewalls to allow TCP port $NODEJS_PORT."
log "   Also ensure 4505/4506 are open if external minions connect."
log "2. TEST GUI: Access http://$TARGET_IP:$NODEJS_PORT and try logging in with the GUI's default credentials (likely 'sysadmin' / 'Changeme1!' unless modified in the repo)."
log "   - NOTE: Login may fail if Salt API PAM is not configured to allow the default user."
log "3. CHECK LOGS: If login fails, check 'sudo journalctl -u salt-api -e' for PAM authentication errors."
log "   Also check 'sudo journalctl -u salt-gui -e' for errors from the Node.js server."
log "4. TEST SALT (CLI): Run 'sudo salt '*' test.ping'"
log "---"