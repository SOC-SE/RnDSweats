#!/usr/bin/env bash

# ==============================================================================
# net-defender.sh - Network Interface Configuration Guardian
#
# Description:
# This script operates in two modes:
# 1. --install: Interactively configures and installs itself as a systemd service.
# 2. Monitoring (default): Runs as a daemon, continuously monitoring a network
#    interface and reverting any unauthorized changes to its IP, gateway, or DNS.
#
# Author: Samuel Brucker
# Version: 1.0'
#
# AI was heavily used in the creation of this script. The AI used was Gemini 2.5 Pro.
# ==============================================================================

# --- Globals and Configuration ---
CONFIG_DIR="/etc/IntProc"
CONFIG_FILE="${CONFIG_DIR}/net-defender.conf"
LOG_FILE="/var/log/net-defender.log"
INSTALL_PATH="/usr/local/bin/net-defender.sh"
SERVICE_NAME="net-defender.service"

# --- Color Codes for User Feedback ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# --- Logging Function ---
# Appends a formatted message to the log file.
log_message() {
    local message="$1"
    # Ensure log file exists and has correct permissions
    touch "${LOG_FILE}"
    chmod 644 "${LOG_FILE}"
    echo -e "[$(date +"%Y-%m-%d %H:%M:%S")] ${message}" >> "${LOG_FILE}"
}

################################################################################
# Installation Mode: Sets up the script as a systemd service.
# Trigger: sudo ./net-defender.sh --install
################################################################################
run_installation() {
    echo -e "${GREEN}Starting Network Defender Installation...${NC}"

    # 1. Root Check
    if [[ "$EUID" -ne 0 ]]; then
        echo -e "${RED}Error: This script must be run with sudo or as root.${NC}"
        exit 1
    fi
    echo "✅ Root privileges verified."

    # 2. Copy script to a system location
    echo -e "${YELLOW}Installing script to ${INSTALL_PATH}...${NC}"
    cp -- "$0" "${INSTALL_PATH}"
    chmod +x "${INSTALL_PATH}"
    echo "✅ Script installed and made executable."

    # 3. Interactive Configuration
    echo -e "${YELLOW}Starting interactive configuration...${NC}"

    # Get Network Interface
    mapfile -t interfaces < <(ip -o link show | awk -F': ' '!/lo/ {print $2}')
    if [ ${#interfaces[@]} -eq 0 ]; then
        echo -e "${RED}Error: No network interfaces found.${NC}"
        exit 1
    fi
    echo "Please select the network interface to protect:"
    select INTERFACE in "${interfaces[@]}"; do
        if [[ -n "$INTERFACE" ]]; then
            break
        else
            echo "Invalid selection. Please try again."
        fi
    done

    # Get IP Address in CIDR
    while true; do
        read -p "Enter the static IPv4 address and subnet (e.g., 192.168.1.100/24): " IP_CIDR
        if [[ "$IP_CIDR" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then
            break
        else
            echo -e "${RED}Invalid format. Please use CIDR notation (e.g., 192.168.1.100/24).${NC}"
        fi
    done

    # Get Default Gateway
    mapfile -t gateways < <(ip route | grep default | awk '{print $3}')
    if [ ${#gateways[@]} -gt 0 ]; then
        read -p "Enter the default gateway [${gateways[0]}]: " GATEWAY
        GATEWAY=${GATEWAY:-${gateways[0]}}
    else
        read -p "Enter the default gateway: " GATEWAY
    fi


    # Get DNS Servers
    read -p "Enter DNS servers, separated by spaces (e.g., \"8.8.8.8 1.1.1.1\"): " DNS_SERVERS

    echo "✅ Configuration data collected."

    # 4. Create Configuration File
    echo -e "${YELLOW}Creating configuration file at ${CONFIG_FILE}...${NC}"
    mkdir -p "${CONFIG_DIR}"
    cat << EOF > "${CONFIG_FILE}"
# Network Defender Configuration
INTERFACE="${INTERFACE}"
IP_CIDR="${IP_CIDR}"
GATEWAY="${GATEWAY}"
DNS_SERVERS="${DNS_SERVERS}"
EOF
    echo "✅ Configuration file created."

    # 5. Create systemd Service File
    echo -e "${YELLOW}Generating systemd service file...${NC}"
    cat << EOF > "/etc/systemd/system/${SERVICE_NAME}"
[Unit]
Description=Network Interface Defender
After=network.target

[Service]
ExecStart=${INSTALL_PATH}
Restart=always
RestartSec=10
StandardOutput=append:${LOG_FILE}
StandardError=append:${LOG_FILE}

[Install]
WantedBy=multi-user.target
EOF
    echo "✅ Systemd service file created."

    # 6. Enable and Start the Service
    echo -e "${YELLOW}Enabling and starting the service...${NC}"
    systemctl daemon-reload
    systemctl enable "${SERVICE_NAME}"
    systemctl start "${SERVICE_NAME}"

    if systemctl is-active --quiet "${SERVICE_NAME}"; then
        echo -e "${GREEN}SUCCESS: Network Defender is now installed, enabled, and running!${NC}"
        echo "------------------------------------------------------------------"
        echo -e "To check the service status, run: ${YELLOW}sudo systemctl status ${SERVICE_NAME}${NC}"
        echo -e "Logs are being written to: ${YELLOW}${LOG_FILE}${NC}"
        echo "------------------------------------------------------------------"
    else
        echo -e "${RED}FAILURE: The service could not be started. Check system logs for errors.${NC}"
        echo -e "Run: ${YELLOW}journalctl -u ${SERVICE_NAME}${NC} to investigate."
        exit 1
    fi
}

################################################################################
# Monitoring Mode: The main loop executed by the systemd service.
# Trigger: ./net-defender.sh (with no arguments)
################################################################################
run_monitoring() {
    # 1. Load Configuration
    if [[ ! -f "$CONFIG_FILE" ]]; then
        log_message "CRITICAL: Config file ${CONFIG_FILE} not found. Aborting."
        exit 1
    fi
    # shellcheck source=/etc/IntProc/net-defender.conf
    source "${CONFIG_FILE}"
    log_message "INFO: Monitoring started for interface ${INTERFACE}."

    # 2. Main Monitoring Loop
    while true; do
        # --- Get CURRENT network configuration ---
        CURRENT_IP=$(ip -4 addr show "${INTERFACE}" 2>/dev/null | grep -oP '(?<=inet\s)\d+(\.\d+){3}/\d+' | head -n 1)
        CURRENT_GATEWAY=$(ip route show 0/0 dev "${INTERFACE}" 2>/dev/null | awk '/via/ {print $3}' | head -n 1)
        # Attempt to get DNS from resolv.conf, as it's the most universal method
        CURRENT_DNS=$(grep '^nameserver' /etc/resolv.conf | awk '{print $2}' | tr '\n' ' ' | sed 's/ *$//')

        # --- Compare and Revert IP Address ---
        if [[ "${CURRENT_IP}" != "${IP_CIDR}" ]]; then
            log_message "CHANGE DETECTED: IP on ${INTERFACE} was '${CURRENT_IP}', expected '${IP_CIDR}'. Reverting."
            # Revert using the best tool available
            if command -v nmcli &> /dev/null; then
                nmcli con mod "$(nmcli -t -f NAME,DEVICE con show --active | grep "${INTERFACE}" | cut -d: -f1)" ipv4.method manual ipv4.addresses "${IP_CIDR}" ipv4.gateway "${GATEWAY}" && nmcli con up "$(nmcli -t -f NAME,DEVICE con show --active | grep "${INTERFACE}" | cut -d: -f1)"
            else
                ip addr flush dev "${INTERFACE}"
                ip addr add "${IP_CIDR}" dev "${INTERFACE}"
            fi
        fi

        # --- Compare and Revert Gateway ---
        if [[ "${CURRENT_GATEWAY}" != "${GATEWAY}" ]]; then
            log_message "CHANGE DETECTED: Gateway on ${INTERFACE} was '${CURRENT_GATEWAY}', expected '${GATEWAY}'. Reverting."
             # Revert using the best tool available
            if command -v nmcli &> /dev/null; then
                 nmcli con mod "$(nmcli -t -f NAME,DEVICE con show --active | grep "${INTERFACE}" | cut -d: -f1)" ipv4.gateway "${GATEWAY}" && nmcli con up "$(nmcli -t -f NAME,DEVICE con show --active | grep "${INTERFACE}" | cut -d: -f1)"
            else
                # Remove any existing default routes for the interface before adding the correct one
                ip route del default dev "${INTERFACE}" 2>/dev/null
                ip route add default via "${GATEWAY}" dev "${INTERFACE}"
            fi
        fi

        # --- Compare and Revert DNS ---
        # Note: Direct manipulation of resolv.conf is complex due to services like systemd-resolved.
        # This check provides detection, and nmcli provides a robust revert. Manual revert is less reliable.
        if [[ "${CURRENT_DNS}" != "${DNS_SERVERS}" ]]; then
            log_message "CHANGE DETECTED: DNS was '${CURRENT_DNS}', expected '${DNS_SERVERS}'. Reverting."
            if command -v nmcli &> /dev/null; then
                nmcli con mod "$(nmcli -t -f NAME,DEVICE con show --active | grep "${INTERFACE}" | cut -d: -f1)" ipv4.dns "${DNS_SERVERS}" && nmcli con up "$(nmcli -t -f NAME,DEVICE con show --active | grep "${INTERFACE}" | cut -d: -f1)"
            else
                # Fallback: Overwrite resolv.conf. This may be temporary if another service manages it.
                log_message "WARNING: Reverting DNS by overwriting /etc/resolv.conf. This may be unstable."
                {
                    echo "# Generated by Net-Defender"
                    for server in $DNS_SERVERS; do
                        echo "nameserver $server"
                    done
                } > /etc/resolv.conf
            fi
        fi

        sleep 5
    done
}


# --- Main Script Logic ---
# Determines whether to run the installation or the monitoring mode.
main() {
    if [[ "$1" == "--install" ]]; then
        run_installation
    elif [[ $# -eq 0 ]]; then
        run_monitoring
    else
        echo -e "${RED}Invalid argument: $1${NC}"
        echo "Usage: $0"
        echo "   (no arguments) : Run in monitoring mode (usually started by systemd)."
        echo "   --install      : Run the interactive installer (requires sudo)."
        exit 1
    fi
}

main "$@"
