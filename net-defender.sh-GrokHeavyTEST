#!/usr/bin/env bash

# net-defender.sh - A self-contained Bash script for network interface protection.
# This script operates in two modes:
# 1. Installation mode (--install): Sets up the script as a systemd service.
# 2. Monitoring mode (no arguments): Monitors and reverts network changes.

# Color codes for output (used in install mode)
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
RESET="\e[0m"

# Function to check if running as root
check_root() {
    if [ "$(id -u)" -ne 0 ]; then
        echo -e "${RED}Error: This script must be run as root (use sudo).${RESET}"
        exit 1
    fi
}

# Function to detect available network interfaces (excluding lo)
get_available_interfaces() {
    ip -o link show | awk -F': ' '{print $2}' | grep -v '^lo$' | tr '\n' ' '
}

# Function to get current IP/CIDR for an interface
get_current_ip() {
    local iface="$1"
    ip -4 addr show dev "$iface" | grep -oP '(?<=inet\s)\K\d{1,3}(\.\d{1,3}){3}/\d{1,2}(?=\s)'
}

# Function to get current default gateway
get_current_gateway() {
    ip route show default | awk '/default/ {print $3}' | head -1
}

# Function to get current DNS servers (space-separated)
get_current_dns() {
    grep '^nameserver' /etc/resolv.conf | awk '{print $2}' | tr '\n' ' ' | xargs
}

# Function to convert CIDR to netmask
cidr_to_netmask() {
    local cidr="$1"
    local mask=0xffffffff
    mask=$((mask << (32 - cidr)))
    printf "%d.%d.%d.%d\n" $((mask >> 24 & 255)) $((mask >> 16 & 255)) $((mask >> 8 & 255)) $((mask & 255))
}

# Function to revert network settings using the prioritized tool
revert_settings() {
    local iface="$1"
    local target_ip_cidr="$2"  # e.g., 192.168.1.100/24
    local target_gw="$3"
    local target_dns="$4"      # space-separated
    local change_type="$5"     # "ip", "gateway", or "dns"

    # Parse IP and CIDR
    local target_ip="${target_ip_cidr%%/*}"
    local target_cidr="${target_ip_cidr##*/}"
    local target_mask=$(cidr_to_netmask "$target_cidr")

    # Prioritize tools: nmcli > ip > ifconfig
    if command -v nmcli >/dev/null 2>&1; then
        echo "Using nmcli to revert $change_type..."
        local con_name
        con_name=$(nmcli dev status | grep "^$iface" | awk '{print $4}')
        if [ -z "$con_name" ] || [ "$con_name" = "--" ]; then
            # Create a new connection if none exists
            nmcli con add con-name "net-defender-$iface" type ethernet ifname "$iface" ipv4.method manual ipv4.addresses "$target_ip_cidr" ipv4.gateway "$target_gw" ipv4.dns "$target_dns"
            con_name="net-defender-$iface"
        else
            nmcli con mod "$con_name" ipv4.addresses "$target_ip_cidr" ipv4.gateway "$target_gw" ipv4.dns "$target_dns" ipv4.method manual
        fi
        nmcli con up "$con_name"
    elif command -v ip >/dev/null 2>&1; then
        echo "Using ip command to revert $change_type..."
        if [ "$change_type" = "ip" ] || [ "$change_type" = "gateway" ]; then
            ip addr flush dev "$iface"
            ip addr add "$target_ip_cidr" dev "$iface"
            ip link set "$iface" up
            ip route del default 2>/dev/null
            ip route add default via "$target_gw"
        fi
        # DNS handled separately below
    elif command -v ifconfig >/dev/null 2>&1; then
        echo "Using ifconfig to revert $change_type..."
        if [ "$change_type" = "ip" ] || [ "$change_type" = "gateway" ]; then
            ifconfig "$iface" "$target_ip" netmask "$target_mask" up
            route del default 2>/dev/null
            route add default gw "$target_gw"
        fi
        # DNS handled separately below
    else
        echo "No suitable tool (nmcli, ip, ifconfig) found to revert changes."
        return 1
    fi

    # Handle DNS reversion (if not using nmcli, edit /etc/resolv.conf directly)
    if [ "$change_type" = "dns" ] && ! command -v nmcli >/dev/null 2>&1; then
        > /etc/resolv.conf
        IFS=' ' read -r -a dns_array <<< "$target_dns"
        for dns in "${dns_array[@]}"; do
            echo "nameserver $dns" >> /etc/resolv.conf
        done
    fi
    return 0
}

# Installation mode
if [ "$1" = "--install" ]; then
    check_root

    echo -e "${YELLOW}Starting installation mode...${RESET}"

    # Copy script to /usr/local/bin
    cp "$0" /usr/local/bin/net-defender.sh
    chmod +x /usr/local/bin/net-defender.sh
    echo -e "${GREEN}Script copied to /usr/local/bin/net-defender.sh.${RESET}"

    # Interactive configuration
    echo -e "${YELLOW}Detecting available network interfaces...${RESET}"
    available_ifaces=$(get_available_interfaces)
    echo "Available interfaces: $available_ifaces"
    read -p "Enter the network interface to protect: " interface
    # Basic validation
    if ! echo "$available_ifaces" | grep -qw "$interface"; then
        echo -e "${RED}Error: Invalid interface.${RESET}"
        exit 1
    fi

    current_ip=$(get_current_ip "$interface")
    read -p "Enter the correct static IPv4 address and subnet mask in CIDR notation (e.g., 192.168.1.100/24) [$current_ip]: " ip
    ip=${ip:-$current_ip}

    current_gw=$(get_current_gateway)
    read -p "Enter the correct default gateway [$current_gw]: " gw
    gw=${gw:-$current_gw}

    current_dns=$(get_current_dns)
    read -p "Enter space-separated list of DNS servers (e.g., '8.8.8.8 1.1.1.1') [$current_dns]: " dns
    dns=${dns:-$current_dns}

    # Create config directory and file
    mkdir -p /etc/IntProc
    cat <<EOF > /etc/IntProc/net-defender.conf
INTERFACE="$interface"
IP="$ip"
GATEWAY="$gw"
DNS="$dns"
EOF
    echo -e "${GREEN}Configuration saved to /etc/IntProc/net-defender.conf.${RESET}"

    # Create systemd service file
    cat <<EOF > /etc/systemd/system/net-defender.service
[Unit]
Description=Network Interface Defender
After=network.target

[Service]
ExecStart=/usr/local/bin/net-defender.sh
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
    echo -e "${GREEN}Systemd service file created at /etc/systemd/system/net-defender.service.${RESET}"

    # Reload, enable, and start service
    systemctl daemon-reload
    systemctl enable net-defender.service
    systemctl start net-defender.service
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Service enabled and started successfully!${RESET}"
    else
        echo -e "${RED}Error starting service.${RESET}"
        exit 1
    fi

    echo -e "${YELLOW}Installation complete. Check service status with: sudo systemctl status net-defender.service${RESET}"
    exit 0
fi

# Monitoring mode (default)
# Load configuration
config_file="/etc/IntProc/net-defender.conf"
if [ ! -f "$config_file" ]; then
    echo "Error: Configuration file $config_file not found. Run with --install first."
    exit 1
fi
source "$config_file"  # Loads INTERFACE, IP, GATEWAY, DNS

log_file="/var/log/net-defender.log"
touch "$log_file"  # Ensure log file exists

while true; do
    # Get current settings
    current_ip=$(get_current_ip "$INTERFACE")
    current_gw=$(get_current_gateway)
    current_dns=$(get_current_dns)

    # Compare and revert if necessary
    if [ "$current_ip" != "$IP" ]; then
        timestamp=$(date +"%Y-%m-%d %H:%M:%S")
        echo "[$timestamp] Change detected on $INTERFACE: IP changed from $IP to $current_ip. Reverting." >> "$log_file"
        revert_settings "$INTERFACE" "$IP" "$GATEWAY" "$DNS" "ip"
    fi

    if [ "$current_gw" != "$GATEWAY" ]; then
        timestamp=$(date +"%Y-%m-%d %H:%M:%S")
        echo "[$timestamp] Change detected on $INTERFACE: Gateway changed from $GATEWAY to $current_gw. Reverting." >> "$log_file"
        revert_settings "$INTERFACE" "$IP" "$GATEWAY" "$DNS" "gateway"
    fi

    if [ "$(echo "$current_dns" | xargs)" != "$(echo "$DNS" | xargs)" ]; then
        timestamp=$(date +"%Y-%m-%d %H:%M:%S")
        echo "[$timestamp] Change detected on $INTERFACE: DNS changed from $DNS to $current_dns. Reverting." >> "$log_file"
        revert_settings "$INTERFACE" "$IP" "$GATEWAY" "$DNS" "dns"
    fi

    sleep 5
done
